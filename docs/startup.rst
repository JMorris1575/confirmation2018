Restarting the Confirmation Website Project
===========================================

After updating to Django 2.01 with the following command::

    pip install django --update

I found that my StBasilConfirmationWebsite no longer worked, and in strange ways. An import statement had changed but
there was some weird problem with one of the models and the error message referred to a required argument of
``on_delete`` to the ``__init__`` program or some such thing. Since I had been thinking of doing so anyway, I just
restarted the whole project almost from scratch.

The Virtual Environment
-----------------------

I say 'almost' from scratch because I'm using the same virtual environment as before and it already has Django and
Sphinx installed.

I got into using it simply by going to Settings:Project:Project Interpreter:gear icon:add local:Existing Environment and
then selecting python.exe from the ``Env/conf/Scripts`` folder.

Starting Documentation with Sphinx
----------------------------------

In PyCharm's Terminal I ran::

    cd docs
    sphinx-quickstart

and chose the defaults for all the questions. This time I named the project "Confirmation Website" with "Fr. Jim Morris"
as the author.

Finally I created this document, startup.rst and started entering text and added ``startup`` under the .. toctree::
heading in index.rst. Running ``make html`` worked without any problems but I will have to edit ``docs/conf.py`` to get
the created files looking better. I will do that tomorrow.

Initiating Version Control
--------------------------

I clicked ``VCS -> Enable Version Control Integration...`` and selected Git as my version control system.

I set up a new repository on GitHub called ``confirmation2018`` and created a ``.gitignore`` file in the
``Confirmation18`` directory containing::

    docs/_build/doctrees/
    docs/_build/html/
    docs/_templates/
    .idea/

In the process I added ``.gitignore`` to Git.  Then I added the rest of the files to Git, namely::

    docs/_static/images/HolyspiritYellowRedFlipped.png
    docs/conf.py
    docs/index.rst
    docs/make.bat
    docs/Makefile
    docs/startup.rst

Finally, I used PyCharm to do my first commit and my first Push to GitHub. In the process I came across that annoying
notice of a ToDo item from ``conf.py`` and looked into filtering it out but the ``Filter TODO Items`` icon didn't seem
to be what I needed. I'll just put up with it for now.

Creating and Configuring the Django Project
-------------------------------------------

I decided to call the Django Project ``confirmation`` and, in the PyCharm terminal typed::

    django-admin startproject confirmation

I changed the name of the inner ``confirmation`` folder to ``config`` by using PyCharm's Refactor. The first time,
nothing seemed to happen. The second time it told me about the changes it was going to make and I clicked the
DoRefactor button. It worked without a hitch.

As before, I created a new directory called ``settings`` in the ``config`` directory and added an ``__init__.py`` file
containing::

    """
    Uncomment the appropriate line according to which machine is being used.
    On the development machine, use dev.py. On the production machine, use prod.py.
    """

    from .dev import *

    # from .prod import *

I copied the original ``settings.py`` file to ``settings/base.py`` and edited it to the following::

    """
    Django settings for confirmation project.

    Generated by 'django-admin startproject' using Django 2.0.1.

    For more information on this file, see
    https://docs.djangoproject.com/en/2.0/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/2.0/ref/settings/
    """

    import os

    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

    import json

    from django.core.exceptions import ImproperlyConfigured
    from django.urls import reverse_lazy

    # JSON-based secrets module
    with open(os.path.join(BASE_DIR, 'config/settings/conf-secrets.json')) as f:
        secrets = json.loads(f.read())

        def get_secret(setting, secrets=secrets):
            """
            Get the secret variable or return explicit exception.

            :param setting: a string indicating the secret variable to be filled
            :param secrets: the secret file read in above
            :return: the value of the setting
            """
            try:
                return secrets[setting]
            except KeyError:
                error_msg = "Set the {0} variable in the secrets file.".format(setting)
                raise ImproperlyConfigured(error_msg)

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = get_secret("SECRET_KEY")

    ALLOWED_HOSTS = []

    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'config.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'config.wsgi.application'


    # Password validation
    # https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/2.0/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'America/Detroit'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True

    LOGIN_URL = reverse_lazy('dj-auth:login')
    LOGOUT_URL = reverse_lazy('dj-auth:logout')
    LOGIN_REDIRECT_URL = reverse_lazy('welcome_page')

Similarly I created ``dev.py`` from the former version::

    from .base import *

    import os

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    # Database
    # https://docs.djangoproject.com/en/2.0/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': get_secret('DATABASE_NAME'),
            'USER': get_secret('DATABASE_USER'),
            'PASSWORD': get_secret('DATABASE_PASSWORD'),
            'HOST': get_secret('DATABASE_HOST'),
            'PORT': get_secret('DATABASE_PORT')
        }
    }

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/2.01/howto/static-files/

    STATIC_URL = '/static/'
    STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static', 'site'), )

And ``prod.py`` too::

    """
    This file will need some work before the website is hosted by WebFaction.
    See the christmas17 project.
    """

    from .base import *

    import os

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False

    # Database
    # https://docs.djangoproject.com/en/2.0/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': get_secret('PROD_DATABASE_NAME'),
            'USER': get_secret('PROD_DATABASE_USER'),
            'PASSWORD': get_secret('PROD_DATABASE_PASSWORD'),
            'HOST': get_secret('PROD_DATABASE_HOST'),
            'PORT': get_secret('PROD_DATABASE_PORT')
        }
    }

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/2.01/howto/static-files/

    # STATIC_ROOT = fill in with webfactional information
    #STATIC_URL = fill in with webfactional information
    STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static', 'site'), )

    EMAIL_HOST = get_secret('EMAIL_HOST')
    EMAIL_HOST_USER = get_secret('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = get_secret('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = get_secret('DEFAULT_FROM_EMAIL')
    SERVER_EMAIL = get_secret('SERVER_EMAIL')

.. index:: pgAdminIV

Preparing the Local Database
----------------------------

In pgAdminIV, which always seems to fail the first time I open it but succeeds the second time, I went to
``Servers(2)->PostgreSQL 10`` and right-clicked ``Databases(1)`` and selected ``Create->Database...``  I named it conf18
and, temporarily anyway, kept the owner as postgres. (There were no other owners listed on this, my rectory computer.)

I managed to add another possible owner by right-clicking on ``Login/Group Roles(6)`` and adding the name 'Jim.' I did
not have to include a password, but I added it later when I found the Definition tab under the ``Properties`` context
menu. I used "dylan-selfie" of course.  I deleted the conf18 database I created above and created a new one selecting
Jim as the owner. I don't know if I had to do it that way or if I could just change the owner by getting into the
properties page.  I may not know if this database works until I add some models to the project.

Testing the Current Form of the Website
---------------------------------------

To test what I've done so far I did a ``python manage.py runserver`` and pointed the browser to ``localhost:8000``. I
got Django 2.0's new "The install worked successfully! Congratulations!" page. Yay!!!

I did another commit before adding my first app.



